### Generated by rprotoc. DO NOT EDIT!
### <proto file: ../proto/music_manager.proto>
# package MusicManager;
# 
# // obtaining list of tracks to export
# 
# message ExportTracksRequest {
# 
#     enum TrackType {
#         ALL = 1;
#         STORE = 2;
#     }
# 
#     required string client_id = 2;
#     optional string continuation_token = 3;
#     optional TrackType export_type = 4;
#     optional int64 updated_min = 5;
# 
# }
# 
# message ExportTracksResponse {
#     enum Status {
#         OK = 1;
#         TRANSIENT_ERROR = 2;
#         CLIENT_MAXED = 3;
#         CLIENT_AUTH_ERROR = 4;
#         CLIENT_REG_ERROR = 5;
#     }
# 
#     message TrackInfo {
#         optional string id = 1;
#         optional string title = 2;
#         optional string album = 3;
#         optional string album_artist = 4;
#         optional string artist = 5;
#         optional int32 track_number = 6;
#         optional int64 track_size = 7;
#     }
# 
#     required Status status = 1;
#     repeated TrackInfo track_info = 2;
#     optional string continuation_token = 3;
#     optional int64 updated_min = 4;
# }
# 
# // requests
# 
# message AuthRequest {
#     required string id = 1;
#     optional string name = 2;
# }
# 
# // response container
# 
# message Response {
#     enum Type {
#         METADATA = 1;
#         PLAYLIST = 2;
#         PLAYLIST_ENTRY = 3;
#         SAMPLE = 4;
#         JOBS = 5;
#         AUTH = 6;
#         CLIENT_STATE = 7;
#         UPDATE_UPLOAD_STATE = 8;
#         DELETE_UPLOAD_REQUESTED = 9;
#     }
# 
#     message Status {
#         enum Code {
#             OK = 1;
#             ALREADY_EXISTS = 2;
#             SOFT_ERROR = 3;
#             METADATA_TOO_LARGE = 4;
#         }
# 
#         required Code code = 1;
#     }
# 
#     enum AuthStatus {
#         OK = 8;
#         MAX_LIMIT_REACHED = 9;
#         CLIENT_BOUND_TO_OTHER_ACCOUNT = 10;
#         CLIENT_NOT_AUTHORIZED = 11;
#         MAX_PER_MACHINE_USSERS_EXCEEDED = 12;
#         CLIENT_PLEASE_RETRY = 13;
#         NOT_SUBSCRIBED = 14;
#         INVALID_REQUEST = 15;
#     }
# 
#     optional Type type = 1;
#     //optional MetadataResponse metadata = 2;
#     //optional PlaylistResponse playlist = 3;
#     //optional PlaylistEntryResponse playlist_entry = 4;
#     //optional SampleResponse sample = 5;
#     //optional JobsResponse jobs = 7;
#     //optional ClientStateResponse client_state = 8;
#     //optional Policy policy = 6;
#     optional AuthStatus auth_status = 11;
#     optional bool auth_error = 12;
# }

require 'protobuf/message/message'
require 'protobuf/message/enum'
require 'protobuf/message/service'
require 'protobuf/message/extend'

module MusicManager
  class ExportTracksRequest < ::Protobuf::Message
    defined_in __FILE__
    class TrackType < ::Protobuf::Enum
      defined_in __FILE__
      ALL = value(:ALL, 1)
      STORE = value(:STORE, 2)
    end
    required :string, :client_id, 2
    optional :string, :continuation_token, 3
    optional :TrackType, :export_type, 4
    optional :int64, :updated_min, 5
  end
  class ExportTracksResponse < ::Protobuf::Message
    defined_in __FILE__
    class Status < ::Protobuf::Enum
      defined_in __FILE__
      OK = value(:OK, 1)
      TRANSIENT_ERROR = value(:TRANSIENT_ERROR, 2)
      CLIENT_MAXED = value(:CLIENT_MAXED, 3)
      CLIENT_AUTH_ERROR = value(:CLIENT_AUTH_ERROR, 4)
      CLIENT_REG_ERROR = value(:CLIENT_REG_ERROR, 5)
    end
    class TrackInfo < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :id, 1
      optional :string, :title, 2
      optional :string, :album, 3
      optional :string, :album_artist, 4
      optional :string, :artist, 5
      optional :int32, :track_number, 6
      optional :int64, :track_size, 7
    end
    required :Status, :status, 1
    repeated :TrackInfo, :track_info, 2
    optional :string, :continuation_token, 3
    optional :int64, :updated_min, 4
  end
  class AuthRequest < ::Protobuf::Message
    defined_in __FILE__
    required :string, :id, 1
    optional :string, :name, 2
  end
  class Response < ::Protobuf::Message
    defined_in __FILE__
    class Type < ::Protobuf::Enum
      defined_in __FILE__
      METADATA = value(:METADATA, 1)
      PLAYLIST = value(:PLAYLIST, 2)
      PLAYLIST_ENTRY = value(:PLAYLIST_ENTRY, 3)
      SAMPLE = value(:SAMPLE, 4)
      JOBS = value(:JOBS, 5)
      AUTH = value(:AUTH, 6)
      CLIENT_STATE = value(:CLIENT_STATE, 7)
      UPDATE_UPLOAD_STATE = value(:UPDATE_UPLOAD_STATE, 8)
      DELETE_UPLOAD_REQUESTED = value(:DELETE_UPLOAD_REQUESTED, 9)
    end
    class Status < ::Protobuf::Message
      defined_in __FILE__
      class Code < ::Protobuf::Enum
        defined_in __FILE__
        OK = value(:OK, 1)
        ALREADY_EXISTS = value(:ALREADY_EXISTS, 2)
        SOFT_ERROR = value(:SOFT_ERROR, 3)
        METADATA_TOO_LARGE = value(:METADATA_TOO_LARGE, 4)
      end
      required :Code, :code, 1
    end
    class AuthStatus < ::Protobuf::Enum
      defined_in __FILE__
      OK = value(:OK, 8)
      MAX_LIMIT_REACHED = value(:MAX_LIMIT_REACHED, 9)
      CLIENT_BOUND_TO_OTHER_ACCOUNT = value(:CLIENT_BOUND_TO_OTHER_ACCOUNT, 10)
      CLIENT_NOT_AUTHORIZED = value(:CLIENT_NOT_AUTHORIZED, 11)
      MAX_PER_MACHINE_USSERS_EXCEEDED = value(:MAX_PER_MACHINE_USSERS_EXCEEDED, 12)
      CLIENT_PLEASE_RETRY = value(:CLIENT_PLEASE_RETRY, 13)
      NOT_SUBSCRIBED = value(:NOT_SUBSCRIBED, 14)
      INVALID_REQUEST = value(:INVALID_REQUEST, 15)
    end
    optional :Type, :type, 1
    optional :AuthStatus, :auth_status, 11
    optional :bool, :auth_error, 12
  end
end